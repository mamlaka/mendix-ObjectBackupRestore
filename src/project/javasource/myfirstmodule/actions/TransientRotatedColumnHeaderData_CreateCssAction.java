// This file was generated by Mendix Business Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package myfirstmodule.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;

/**
 * 
 */
public class TransientRotatedColumnHeaderData_CreateCssAction extends CustomJavaAction<Boolean>
{
	private IMendixObject __data;
	private myfirstmodule.proxies.TransientRotatedColumnHeaderData data;

	public TransientRotatedColumnHeaderData_CreateCssAction(IContext context, IMendixObject data)
	{
		super(context);
		this.__data = data;
	}

	@Override
	public Boolean executeAction() throws Exception
	{
		this.data = __data == null ? null : myfirstmodule.proxies.TransientRotatedColumnHeaderData.initialize(getContext(), __data);

		// BEGIN USER CODE

		StringBuffer cssTableCell = new StringBuffer();
		StringBuffer cssHeaderTh = new StringBuffer();
		StringBuffer cssHeaderDiv = new StringBuffer();
		StringBuffer cssHeaderSpan = new StringBuffer();
		
		int cellWidth = data.getCellWidth();
		int headerHeight = data.getHeaderHeight();
		int rotationDegree = data.getRotationDegree();
		int rotationDegreeOpposite = 360 - rotationDegree;
		double rotationDegreeRadians = Math.toRadians(rotationDegree);
		double cosRotationDegree = Math.cos(rotationDegreeRadians);
		double tanRotationDegree = Math.tan(rotationDegreeRadians);
		
		/* 80 * tan(45) / 2 = 40 where 80 is the height on the cell and 45 is the transform angle*/
		long divLeft = Math.round((headerHeight * tanRotationDegree) / 2);
		
		/* 80 / cos(45) - 40 * cos (45) = 85 where 80 is the height of the cell, 40 the width of the cell and 45 the transform angle*/
		long spanWidth = Math.round(headerHeight / cosRotationDegree - 40 * cosRotationDegree);

		cssTableCell.append("width: ").append(cellWidth).append("px;\n");

		cssHeaderTh.append("height: ").append(headerHeight).append("px;\n");
		cssHeaderTh.append("width: ").append(cellWidth).append("px;\n");
		cssHeaderTh.append("min-width: ").append(cellWidth).append("px;\n");
		cssHeaderTh.append("max-width: ").append(cellWidth).append("px;\n");

		cssHeaderDiv.append("left: ").append(divLeft).append("px;\n");
		cssHeaderDiv.append("-ms-transform: skew(-").append(rotationDegree).append("deg,0deg);\n");
		cssHeaderDiv.append("-moz-transform: skew(-").append(rotationDegree).append("deg,0deg);\n");
		cssHeaderDiv.append("-webkit-transform: skew(-").append(rotationDegree).append("deg,0deg);\n");
		cssHeaderDiv.append("-o-transform: skew(-").append(rotationDegree).append("deg,0deg);\n");
		cssHeaderDiv.append("transform: skew(-").append(rotationDegree).append("deg,0deg);\n");

		cssHeaderSpan.append("-ms-transform: skew(").append(rotationDegree).append("deg,0deg) rotate(").append(rotationDegreeOpposite).append("deg);\n");
		cssHeaderSpan.append("-moz-transform: skew(").append(rotationDegree).append("deg,0deg) rotate(").append(rotationDegreeOpposite).append("deg);\n");
		cssHeaderSpan.append("-webkit-transform: skew(").append(rotationDegree).append("deg,0deg) rotate(").append(rotationDegreeOpposite).append("deg);\n");
		cssHeaderSpan.append("-o-transform: skew(").append(rotationDegree).append("deg,0deg) rotate(").append(rotationDegreeOpposite).append("deg);\n");
		cssHeaderSpan.append("transform: skew(").append(rotationDegree).append("deg,0deg) rotate(").append(rotationDegreeOpposite).append("deg);\n");
		cssHeaderSpan.append("bottom: ").append(data.getHeaderLabelBottom()).append("px;\n");
		cssHeaderSpan.append("left: ").append(data.getHeaderLabelLeft()).append("px;\n");
		cssHeaderSpan.append("width: ").append(spanWidth).append("px;\n");
		
		cssTableCell.append(data.getInputCssTableCell());
		cssHeaderTh.append(data.getInputCssHeaderTh());
		cssHeaderDiv.append(data.getInputCssHeaderDiv());
		cssHeaderSpan.append(data.getInputCssHeaderSpan());
		
		data.setResultCssTableCell(cssTableCell.toString());
		data.setResultCssHeaderTh(cssHeaderTh.toString());
		data.setResultCssHeaderDiv(cssHeaderDiv.toString());
		data.setResultCssHeaderSpan(cssHeaderSpan.toString());
		
		return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "TransientRotatedColumnHeaderData_CreateCssAction";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
