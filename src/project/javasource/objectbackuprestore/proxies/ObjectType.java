// This file was generated by Mendix Business Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package objectbackuprestore.proxies;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * 
 */
public class ObjectType
{
	private final IMendixObject objectTypeMendixObject;

	private final IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final String entityName = "ObjectBackupRestore.ObjectType";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		CompleteName("CompleteName"),
		ObjectType_MxObjectType("ObjectBackupRestore.ObjectType_MxObjectType"),
		ObjectType_MxObjectMember_PrimaryKey("ObjectBackupRestore.ObjectType_MxObjectMember_PrimaryKey");

		private String metaName;

		MemberNames(String s)
		{
			metaName = s;
		}

		@Override
		public String toString()
		{
			return metaName;
		}
	}

	public ObjectType(IContext context)
	{
		this(context, Core.instantiate(context, "ObjectBackupRestore.ObjectType"));
	}

	protected ObjectType(IContext context, IMendixObject objectTypeMendixObject)
	{
		if (objectTypeMendixObject == null)
			throw new IllegalArgumentException("The given object cannot be null.");
		if (!Core.isSubClassOf("ObjectBackupRestore.ObjectType", objectTypeMendixObject.getType()))
			throw new IllegalArgumentException("The given object is not a ObjectBackupRestore.ObjectType");

		this.objectTypeMendixObject = objectTypeMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'new ObjectType(Context)' instead. Note that the constructor will not insert the new object in the database.
	 */
	@Deprecated
	public static objectbackuprestore.proxies.ObjectType create(IContext context) throws CoreException
	{
		IMendixObject mendixObject = Core.create(context, "ObjectBackupRestore.ObjectType");
		return new objectbackuprestore.proxies.ObjectType(context, mendixObject);
	}

	/**
	 * @deprecated Use 'ObjectType.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static objectbackuprestore.proxies.ObjectType initialize(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		return objectbackuprestore.proxies.ObjectType.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static objectbackuprestore.proxies.ObjectType initialize(IContext context, IMendixObject mendixObject)
	{
		return new objectbackuprestore.proxies.ObjectType(context, mendixObject);
	}

	public static objectbackuprestore.proxies.ObjectType load(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		IMendixObject mendixObject = Core.retrieveId(context, mendixIdentifier);
		return objectbackuprestore.proxies.ObjectType.initialize(context, mendixObject);
	}

	public static java.util.List<objectbackuprestore.proxies.ObjectType> load(IContext context, String xpathConstraint) throws CoreException
	{
		java.util.List<objectbackuprestore.proxies.ObjectType> result = new java.util.ArrayList<objectbackuprestore.proxies.ObjectType>();
		for (IMendixObject obj : Core.retrieveXPathQuery(context, "//ObjectBackupRestore.ObjectType" + xpathConstraint))
			result.add(objectbackuprestore.proxies.ObjectType.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(IContext context) throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(IContext context)
	{
		Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of CompleteName
	 */
	public final String getCompleteName()
	{
		return getCompleteName(getContext());
	}

	/**
	 * @param context
	 * @return value of CompleteName
	 */
	public final String getCompleteName(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.CompleteName.toString());
	}

	/**
	 * Set value of CompleteName
	 * @param completename
	 */
	public final void setCompleteName(String completename)
	{
		setCompleteName(getContext(), completename);
	}

	/**
	 * Set value of CompleteName
	 * @param context
	 * @param completename
	 */
	public final void setCompleteName(IContext context, String completename)
	{
		getMendixObject().setValue(context, MemberNames.CompleteName.toString(), completename);
	}

	/**
	 * @return value of ObjectType_MxObjectType
	 */
	public final mxmodelreflection.proxies.MxObjectType getObjectType_MxObjectType() throws CoreException
	{
		return getObjectType_MxObjectType(getContext());
	}

	/**
	 * @param context
	 * @return value of ObjectType_MxObjectType
	 */
	public final mxmodelreflection.proxies.MxObjectType getObjectType_MxObjectType(IContext context) throws CoreException
	{
		mxmodelreflection.proxies.MxObjectType result = null;
		IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.ObjectType_MxObjectType.toString());
		if (identifier != null)
			result = mxmodelreflection.proxies.MxObjectType.load(context, identifier);
		return result;
	}

	/**
	 * Set value of ObjectType_MxObjectType
	 * @param objecttype_mxobjecttype
	 */
	public final void setObjectType_MxObjectType(mxmodelreflection.proxies.MxObjectType objecttype_mxobjecttype)
	{
		setObjectType_MxObjectType(getContext(), objecttype_mxobjecttype);
	}

	/**
	 * Set value of ObjectType_MxObjectType
	 * @param context
	 * @param objecttype_mxobjecttype
	 */
	public final void setObjectType_MxObjectType(IContext context, mxmodelreflection.proxies.MxObjectType objecttype_mxobjecttype)
	{
		if (objecttype_mxobjecttype == null)
			getMendixObject().setValue(context, MemberNames.ObjectType_MxObjectType.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.ObjectType_MxObjectType.toString(), objecttype_mxobjecttype.getMendixObject().getId());
	}

	/**
	 * @return value of ObjectType_MxObjectMember_PrimaryKey
	 */
	public final mxmodelreflection.proxies.MxObjectMember getObjectType_MxObjectMember_PrimaryKey() throws CoreException
	{
		return getObjectType_MxObjectMember_PrimaryKey(getContext());
	}

	/**
	 * @param context
	 * @return value of ObjectType_MxObjectMember_PrimaryKey
	 */
	public final mxmodelreflection.proxies.MxObjectMember getObjectType_MxObjectMember_PrimaryKey(IContext context) throws CoreException
	{
		mxmodelreflection.proxies.MxObjectMember result = null;
		IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.ObjectType_MxObjectMember_PrimaryKey.toString());
		if (identifier != null)
			result = mxmodelreflection.proxies.MxObjectMember.load(context, identifier);
		return result;
	}

	/**
	 * Set value of ObjectType_MxObjectMember_PrimaryKey
	 * @param objecttype_mxobjectmember_primarykey
	 */
	public final void setObjectType_MxObjectMember_PrimaryKey(mxmodelreflection.proxies.MxObjectMember objecttype_mxobjectmember_primarykey)
	{
		setObjectType_MxObjectMember_PrimaryKey(getContext(), objecttype_mxobjectmember_primarykey);
	}

	/**
	 * Set value of ObjectType_MxObjectMember_PrimaryKey
	 * @param context
	 * @param objecttype_mxobjectmember_primarykey
	 */
	public final void setObjectType_MxObjectMember_PrimaryKey(IContext context, mxmodelreflection.proxies.MxObjectMember objecttype_mxobjectmember_primarykey)
	{
		if (objecttype_mxobjectmember_primarykey == null)
			getMendixObject().setValue(context, MemberNames.ObjectType_MxObjectMember_PrimaryKey.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.ObjectType_MxObjectMember_PrimaryKey.toString(), objecttype_mxobjectmember_primarykey.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final IMendixObject getMendixObject()
	{
		return objectTypeMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final objectbackuprestore.proxies.ObjectType that = (objectbackuprestore.proxies.ObjectType) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static String getType()
	{
		return "ObjectBackupRestore.ObjectType";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
