// This file was generated by Mendix Business Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package objectbackuprestore.proxies;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * 
 */
public class TreeViewNodeData
{
	private final IMendixObject treeViewNodeDataMendixObject;

	private final IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final String entityName = "ObjectBackupRestore.TreeViewNodeData";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Caption("Caption"),
		NodeClass("NodeClass"),
		Key("Key"),
		TreeViewNodeData_TreeViewWidgetData("ObjectBackupRestore.TreeViewNodeData_TreeViewWidgetData"),
		ParentNode("ObjectBackupRestore.ParentNode");

		private String metaName;

		MemberNames(String s)
		{
			metaName = s;
		}

		@Override
		public String toString()
		{
			return metaName;
		}
	}

	public TreeViewNodeData(IContext context)
	{
		this(context, Core.instantiate(context, "ObjectBackupRestore.TreeViewNodeData"));
	}

	protected TreeViewNodeData(IContext context, IMendixObject treeViewNodeDataMendixObject)
	{
		if (treeViewNodeDataMendixObject == null)
			throw new IllegalArgumentException("The given object cannot be null.");
		if (!Core.isSubClassOf("ObjectBackupRestore.TreeViewNodeData", treeViewNodeDataMendixObject.getType()))
			throw new IllegalArgumentException("The given object is not a ObjectBackupRestore.TreeViewNodeData");

		this.treeViewNodeDataMendixObject = treeViewNodeDataMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'new TreeViewNodeData(Context)' instead. Note that the constructor will not insert the new object in the database.
	 */
	@Deprecated
	public static objectbackuprestore.proxies.TreeViewNodeData create(IContext context) throws CoreException
	{
		IMendixObject mendixObject = Core.create(context, "ObjectBackupRestore.TreeViewNodeData");
		return new objectbackuprestore.proxies.TreeViewNodeData(context, mendixObject);
	}

	/**
	 * @deprecated Use 'TreeViewNodeData.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static objectbackuprestore.proxies.TreeViewNodeData initialize(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		return objectbackuprestore.proxies.TreeViewNodeData.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static objectbackuprestore.proxies.TreeViewNodeData initialize(IContext context, IMendixObject mendixObject)
	{
		if (Core.isSubClassOf("ObjectBackupRestore.BackupConfigurationTreeNodeData", mendixObject.getType()))
			return objectbackuprestore.proxies.BackupConfigurationTreeNodeData.initialize(context, mendixObject);

		return new objectbackuprestore.proxies.TreeViewNodeData(context, mendixObject);
	}

	public static objectbackuprestore.proxies.TreeViewNodeData load(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		IMendixObject mendixObject = Core.retrieveId(context, mendixIdentifier);
		return objectbackuprestore.proxies.TreeViewNodeData.initialize(context, mendixObject);
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(IContext context) throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(IContext context)
	{
		Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of Caption
	 */
	public final String getCaption()
	{
		return getCaption(getContext());
	}

	/**
	 * @param context
	 * @return value of Caption
	 */
	public final String getCaption(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.Caption.toString());
	}

	/**
	 * Set value of Caption
	 * @param caption
	 */
	public final void setCaption(String caption)
	{
		setCaption(getContext(), caption);
	}

	/**
	 * Set value of Caption
	 * @param context
	 * @param caption
	 */
	public final void setCaption(IContext context, String caption)
	{
		getMendixObject().setValue(context, MemberNames.Caption.toString(), caption);
	}

	/**
	 * @return value of NodeClass
	 */
	public final String getNodeClass()
	{
		return getNodeClass(getContext());
	}

	/**
	 * @param context
	 * @return value of NodeClass
	 */
	public final String getNodeClass(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.NodeClass.toString());
	}

	/**
	 * Set value of NodeClass
	 * @param nodeclass
	 */
	public final void setNodeClass(String nodeclass)
	{
		setNodeClass(getContext(), nodeclass);
	}

	/**
	 * Set value of NodeClass
	 * @param context
	 * @param nodeclass
	 */
	public final void setNodeClass(IContext context, String nodeclass)
	{
		getMendixObject().setValue(context, MemberNames.NodeClass.toString(), nodeclass);
	}

	/**
	 * @return value of Key
	 */
	public final String getKey()
	{
		return getKey(getContext());
	}

	/**
	 * @param context
	 * @return value of Key
	 */
	public final String getKey(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.Key.toString());
	}

	/**
	 * Set value of Key
	 * @param key
	 */
	public final void setKey(String key)
	{
		setKey(getContext(), key);
	}

	/**
	 * Set value of Key
	 * @param context
	 * @param key
	 */
	public final void setKey(IContext context, String key)
	{
		getMendixObject().setValue(context, MemberNames.Key.toString(), key);
	}

	/**
	 * @return value of TreeViewNodeData_TreeViewWidgetData
	 */
	public final objectbackuprestore.proxies.TreeViewWidgetData getTreeViewNodeData_TreeViewWidgetData() throws CoreException
	{
		return getTreeViewNodeData_TreeViewWidgetData(getContext());
	}

	/**
	 * @param context
	 * @return value of TreeViewNodeData_TreeViewWidgetData
	 */
	public final objectbackuprestore.proxies.TreeViewWidgetData getTreeViewNodeData_TreeViewWidgetData(IContext context) throws CoreException
	{
		objectbackuprestore.proxies.TreeViewWidgetData result = null;
		IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.TreeViewNodeData_TreeViewWidgetData.toString());
		if (identifier != null)
			result = objectbackuprestore.proxies.TreeViewWidgetData.load(context, identifier);
		return result;
	}

	/**
	 * Set value of TreeViewNodeData_TreeViewWidgetData
	 * @param treeviewnodedata_treeviewwidgetdata
	 */
	public final void setTreeViewNodeData_TreeViewWidgetData(objectbackuprestore.proxies.TreeViewWidgetData treeviewnodedata_treeviewwidgetdata)
	{
		setTreeViewNodeData_TreeViewWidgetData(getContext(), treeviewnodedata_treeviewwidgetdata);
	}

	/**
	 * Set value of TreeViewNodeData_TreeViewWidgetData
	 * @param context
	 * @param treeviewnodedata_treeviewwidgetdata
	 */
	public final void setTreeViewNodeData_TreeViewWidgetData(IContext context, objectbackuprestore.proxies.TreeViewWidgetData treeviewnodedata_treeviewwidgetdata)
	{
		if (treeviewnodedata_treeviewwidgetdata == null)
			getMendixObject().setValue(context, MemberNames.TreeViewNodeData_TreeViewWidgetData.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.TreeViewNodeData_TreeViewWidgetData.toString(), treeviewnodedata_treeviewwidgetdata.getMendixObject().getId());
	}

	/**
	 * @return value of ParentNode
	 */
	public final objectbackuprestore.proxies.TreeViewNodeData getParentNode() throws CoreException
	{
		return getParentNode(getContext());
	}

	/**
	 * @param context
	 * @return value of ParentNode
	 */
	public final objectbackuprestore.proxies.TreeViewNodeData getParentNode(IContext context) throws CoreException
	{
		objectbackuprestore.proxies.TreeViewNodeData result = null;
		IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.ParentNode.toString());
		if (identifier != null)
			result = objectbackuprestore.proxies.TreeViewNodeData.load(context, identifier);
		return result;
	}

	/**
	 * Set value of ParentNode
	 * @param parentnode
	 */
	public final void setParentNode(objectbackuprestore.proxies.TreeViewNodeData parentnode)
	{
		setParentNode(getContext(), parentnode);
	}

	/**
	 * Set value of ParentNode
	 * @param context
	 * @param parentnode
	 */
	public final void setParentNode(IContext context, objectbackuprestore.proxies.TreeViewNodeData parentnode)
	{
		if (parentnode == null)
			getMendixObject().setValue(context, MemberNames.ParentNode.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.ParentNode.toString(), parentnode.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final IMendixObject getMendixObject()
	{
		return treeViewNodeDataMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final objectbackuprestore.proxies.TreeViewNodeData that = (objectbackuprestore.proxies.TreeViewNodeData) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static String getType()
	{
		return "ObjectBackupRestore.TreeViewNodeData";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
